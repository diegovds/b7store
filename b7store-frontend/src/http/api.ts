/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * B7Store Backend
 * API para a B7Store
 * OpenAPI spec version: 0.0.1
 */
import { customFetch } from '../../fetchMutator'
export type GetBanners200Error = string | null

export type GetBanners200BannersItem = {
  img: string
  link: string
}

export type GetBanners200 = {
  error: GetBanners200Error
  banners: GetBanners200BannersItem[]
}

export type GetProductsParams = {
  metadata?: string
  orderBy?: GetProductsOrderBy
  /**
   * @pattern ^\d+$
   */
  limit?: string
  categoryId?: string
}

export type GetProductsOrderBy =
  (typeof GetProductsOrderBy)[keyof typeof GetProductsOrderBy]

export const GetProductsOrderBy = {
  views: 'views',
  selling: 'selling',
  price: 'price',
} as const

export type GetProducts200Error = string | null

export type GetProducts200ProductsItemImage = string | null

export type GetProducts200ProductsItem = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  id: number
  label: string
  price: number
  image: GetProducts200ProductsItemImage
  liked: boolean
}

export type GetProducts200 = {
  error: GetProducts200Error
  products: GetProducts200ProductsItem[]
}

export type GetProductId200Error = string | null

export type GetProductId200ProductAnyOfDescription = string | null

export type GetProductId200ProductAnyOf = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  id: number
  label: string
  price: number
  description: GetProductId200ProductAnyOfDescription
  images: string[]
  liked: boolean
}

export type GetProductId200Product = GetProductId200ProductAnyOf | null

export type GetProductId200CategoryAnyOf = {
  id: number
  name: string
  slug: string
}

export type GetProductId200Category = GetProductId200CategoryAnyOf | null

export type GetProductId200 = {
  error: GetProductId200Error
  product: GetProductId200Product
  category: GetProductId200Category
}

export type GetProductIdRelatedParams = {
  /**
   * @pattern ^\d+$
   */
  limit?: string
}

export type GetProductIdRelated200Error = string | null

export type GetProductIdRelated200ProductsItemImage = string | null

export type GetProductIdRelated200ProductsItem = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  id: number
  label: string
  price: number
  image: GetProductIdRelated200ProductsItemImage
  liked: boolean
}

export type GetProductIdRelated200 = {
  error: GetProductIdRelated200Error
  products: GetProductIdRelated200ProductsItem[]
}

export type GetCategorySlugMetadata200Error = string | null

export type GetCategorySlugMetadata200CategoryAnyOf = {
  id: number
  name: string
  slug: string
}

export type GetCategorySlugMetadata200Category =
  GetCategorySlugMetadata200CategoryAnyOf | null

export type GetCategorySlugMetadata200MetadataItemValuesItem = {
  id: string
  label: string
}

export type GetCategorySlugMetadata200MetadataItem = {
  id: string
  name: string
  values: GetCategorySlugMetadata200MetadataItemValuesItem[]
}

export type GetCategorySlugMetadata200 = {
  error: GetCategorySlugMetadata200Error
  category: GetCategorySlugMetadata200Category
  metadata: GetCategorySlugMetadata200MetadataItem[]
}

export type GetCategorySlugMetadata404 = {
  error: string
}

export type PostCartMountBody = {
  /** @minItems 1 */
  ids: number[]
}

export type PostCartMount200Error = string | null

export type PostCartMount200ProductsItemImage = string | null

export type PostCartMount200ProductsItem = {
  id: number
  label: string
  price: number
  image: PostCartMount200ProductsItemImage
}

export type PostCartMount200 = {
  error: PostCartMount200Error
  products: PostCartMount200ProductsItem[]
}

export type GetCartShippingParams = {
  /**
   * @pattern ^\d{5}-\d{3}$
   */
  zipcode: string
}

export type GetCartShipping200Error = string | null

export type GetCartShipping200 = {
  error: GetCartShipping200Error
  zipcode: string
  cost: number
  days: number
}

export type PostUserRegisterBody = {
  /** @minLength 2 */
  name: string
  /** @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$ */
  email: string
  /** @minLength 4 */
  password: string
}

export type PostUserRegister201Error = string | null

export type PostUserRegister201User = {
  id: number
  name: string
  email: string
}

export type PostUserRegister201 = {
  error: PostUserRegister201Error
  user: PostUserRegister201User
}

export type PostUserRegister400 = {
  error: string
}

export type PostUserLoginBody = {
  /** @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$ */
  email: string
  /** @minLength 4 */
  password: string
}

export type PostUserLogin200Error = string | null

export type PostUserLogin200 = {
  error: PostUserLogin200Error
  token: string
}

export type PostUserLogin400 = {
  error: string
}

export type PostUserAddressesBodyComplement = string | null

export type PostUserAddressesBody = {
  /** @pattern ^\d{5}-\d{3}$ */
  zipcode: string
  /** @minLength 1 */
  street: string
  /** @minLength 1 */
  number: string
  /** @minLength 1 */
  city: string
  /** @minLength 1 */
  state: string
  /** @minLength 1 */
  country: string
  complement: PostUserAddressesBodyComplement
}

export type PostUserAddresses200Error = string | null

export type PostUserAddresses200AddressComplement = string | null

export type PostUserAddresses200Address = {
  /** @pattern ^\d{5}-\d{3}$ */
  zipcode: string
  /** @minLength 1 */
  street: string
  /** @minLength 1 */
  number: string
  /** @minLength 1 */
  city: string
  /** @minLength 1 */
  state: string
  /** @minLength 1 */
  country: string
  complement: PostUserAddresses200AddressComplement
  id: number
}

export type PostUserAddresses200 = {
  error: PostUserAddresses200Error
  address: PostUserAddresses200Address
}

export type GetUserAddresses200Error = string | null

export type GetUserAddresses200AddressItemComplement = string | null

export type GetUserAddresses200AddressItem = {
  id: number
  /** @pattern ^\d{5}-\d{3}$ */
  zipcode: string
  /** @minLength 1 */
  street: string
  /** @minLength 1 */
  number: string
  /** @minLength 1 */
  city: string
  /** @minLength 1 */
  state: string
  /** @minLength 1 */
  country: string
  complement: GetUserAddresses200AddressItemComplement
}

export type GetUserAddresses200 = {
  error: GetUserAddresses200Error
  address: GetUserAddresses200AddressItem[]
}

export type PostCartFinishBodyCartItem = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  productId: number
  /**
   * @minimum 1
   * @maximum 9007199254740991
   */
  quantity: number
}

export type PostCartFinishBody = {
  /** @minItems 1 */
  cart: PostCartFinishBodyCartItem[]
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  addressId: number
}

export type PostCartFinish200Error = string | null

export type PostCartFinish200 = {
  error: PostCartFinish200Error
  url: string
}

export type PostCartFinish400 = {
  error: string
}

export type GetOrdersSessionParams = {
  session_id: string
}

export type GetOrdersSession200Error = string | null

export type GetOrdersSession200 = {
  error: GetOrdersSession200Error
  orderId: number
}

export type GetOrdersSession404 = {
  error: string
}

export type GetOrders200Error = string | null

export type GetOrders200OrdersItemStatus =
  (typeof GetOrders200OrdersItemStatus)[keyof typeof GetOrders200OrdersItemStatus]

export const GetOrders200OrdersItemStatus = {
  pending: 'pending',
  paid: 'paid',
  cancelled: 'cancelled',
} as const

export type GetOrders200OrdersItem = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  id: number
  status: GetOrders200OrdersItemStatus
  /**
   * @minimum 0
   * @exclusiveMinimum
   */
  total: number
  createdAt: unknown
}

export type GetOrders200 = {
  error: GetOrders200Error
  orders: GetOrders200OrdersItem[]
}

export type GetOrdersId200Error = string | null

export type GetOrdersId200OrderStatus =
  (typeof GetOrdersId200OrderStatus)[keyof typeof GetOrdersId200OrderStatus]

export const GetOrdersId200OrderStatus = {
  pending: 'pending',
  paid: 'paid',
  cancelled: 'cancelled',
} as const

export type GetOrdersId200OrderShippingZipcode = string | null

export type GetOrdersId200OrderShippingStreet = string | null

export type GetOrdersId200OrderShippingNumber = string | null

export type GetOrdersId200OrderShippingCity = string | null

export type GetOrdersId200OrderShippingState = string | null

export type GetOrdersId200OrderShippingCountry = string | null

export type GetOrdersId200OrderShippingComplement = string | null

export type GetOrdersId200OrderOrderItemsItemProductImage = string | null

export type GetOrdersId200OrderOrderItemsItemProduct = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  id: number
  label: string
  /**
   * @minimum 0
   * @exclusiveMinimum
   */
  price: number
  image: GetOrdersId200OrderOrderItemsItemProductImage
}

export type GetOrdersId200OrderOrderItemsItem = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  id: number
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  quantity: number
  /**
   * @minimum 0
   * @exclusiveMinimum
   */
  price: number
  product: GetOrdersId200OrderOrderItemsItemProduct
}

export type GetOrdersId200Order = {
  /**
   * @minimum 0
   * @maximum 9007199254740991
   * @exclusiveMinimum
   */
  id: number
  status: GetOrdersId200OrderStatus
  /**
   * @minimum 0
   * @exclusiveMinimum
   */
  total: number
  createdAt: unknown
  /** @minimum 0 */
  shippingCost: number
  /**
   * @minimum 0
   * @maximum 9007199254740991
   */
  shippingDays: number
  shippingZipcode: GetOrdersId200OrderShippingZipcode
  shippingStreet: GetOrdersId200OrderShippingStreet
  shippingNumber: GetOrdersId200OrderShippingNumber
  shippingCity: GetOrdersId200OrderShippingCity
  shippingState: GetOrdersId200OrderShippingState
  shippingCountry: GetOrdersId200OrderShippingCountry
  shippingComplement: GetOrdersId200OrderShippingComplement
  /** @minItems 1 */
  orderItems: GetOrdersId200OrderOrderItemsItem[]
}

export type GetOrdersId200 = {
  error: GetOrdersId200Error
  order: GetOrdersId200Order
}

export type GetOrdersId404 = {
  error: string
}

export const getPostWebhookStripeUrl = () => {
  return `/webhook/stripe`
}

export const postWebhookStripe = async (
  options?: RequestInit,
): Promise<null> => {
  return customFetch<null>(getPostWebhookStripeUrl(), {
    ...options,
    method: 'POST',
  })
}

export const getGetPingUrl = () => {
  return `/ping`
}

export const getPing = async (options?: RequestInit): Promise<null> => {
  return customFetch<null>(getGetPingUrl(), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Get all banners.
 */
export const getGetBannersUrl = () => {
  return `/banners`
}

export const getBanners = async (
  options?: RequestInit,
): Promise<GetBanners200> => {
  return customFetch<GetBanners200>(getGetBannersUrl(), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Get all products.
 */
export const getGetProductsUrl = (params?: GetProductsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/products?${stringifiedParams}`
    : `/products`
}

export const getProducts = async (
  params?: GetProductsParams,
  options?: RequestInit,
): Promise<GetProducts200> => {
  return customFetch<GetProducts200>(getGetProductsUrl(params), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Get product by ID.
 */
export const getGetProductIdUrl = (id: string) => {
  return `/product/${id}`
}

export const getProductId = async (
  id: string,
  options?: RequestInit,
): Promise<GetProductId200> => {
  return customFetch<GetProductId200>(getGetProductIdUrl(id), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Get related products from the same category.
 */
export const getGetProductIdRelatedUrl = (
  id: string,
  params?: GetProductIdRelatedParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/product/${id}/related?${stringifiedParams}`
    : `/product/${id}/related`
}

export const getProductIdRelated = async (
  id: string,
  params?: GetProductIdRelatedParams,
  options?: RequestInit,
): Promise<GetProductIdRelated200> => {
  return customFetch<GetProductIdRelated200>(
    getGetProductIdRelatedUrl(id, params),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Get category and its metadata by slug.
 */
export const getGetCategorySlugMetadataUrl = (slug: string) => {
  return `/category/${slug}/metadata`
}

export const getCategorySlugMetadata = async (
  slug: string,
  options?: RequestInit,
): Promise<GetCategorySlugMetadata200> => {
  return customFetch<GetCategorySlugMetadata200>(
    getGetCategorySlugMetadataUrl(slug),
    {
      ...options,
      method: 'GET',
    },
  )
}

/**
 * @summary Get product details for a list of product IDs.
 */
export const getPostCartMountUrl = () => {
  return `/cart/mount`
}

export const postCartMount = async (
  postCartMountBody: PostCartMountBody,
  options?: RequestInit,
): Promise<PostCartMount200> => {
  return customFetch<PostCartMount200>(getPostCartMountUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postCartMountBody),
  })
}

/**
 * @summary Calculate shipping cost and days for a zipcode.
 */
export const getGetCartShippingUrl = (params: GetCartShippingParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/cart/shipping?${stringifiedParams}`
    : `/cart/shipping`
}

export const getCartShipping = async (
  params: GetCartShippingParams,
  options?: RequestInit,
): Promise<GetCartShipping200> => {
  return customFetch<GetCartShipping200>(getGetCartShippingUrl(params), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Register a new user.
 */
export const getPostUserRegisterUrl = () => {
  return `/user/register`
}

export const postUserRegister = async (
  postUserRegisterBody: PostUserRegisterBody,
  options?: RequestInit,
): Promise<PostUserRegister201> => {
  return customFetch<PostUserRegister201>(getPostUserRegisterUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postUserRegisterBody),
  })
}

/**
 * @summary Login and receive a token.
 */
export const getPostUserLoginUrl = () => {
  return `/user/login`
}

export const postUserLogin = async (
  postUserLoginBody: PostUserLoginBody,
  options?: RequestInit,
): Promise<PostUserLogin200> => {
  return customFetch<PostUserLogin200>(getPostUserLoginUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postUserLoginBody),
  })
}

/**
 * @summary Add a new address for the logged-in user.
 */
export const getPostUserAddressesUrl = () => {
  return `/user/addresses`
}

export const postUserAddresses = async (
  postUserAddressesBody: PostUserAddressesBody,
  options?: RequestInit,
): Promise<PostUserAddresses200> => {
  return customFetch<PostUserAddresses200>(getPostUserAddressesUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postUserAddressesBody),
  })
}

/**
 * @summary Get all addresses for the logged-in user.
 */
export const getGetUserAddressesUrl = () => {
  return `/user/addresses`
}

export const getUserAddresses = async (
  options?: RequestInit,
): Promise<GetUserAddresses200> => {
  return customFetch<GetUserAddresses200>(getGetUserAddressesUrl(), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Finish the cart and create an order (returns Stripe checkout URL).
 */
export const getPostCartFinishUrl = () => {
  return `/cart/finish`
}

export const postCartFinish = async (
  postCartFinishBody: PostCartFinishBody,
  options?: RequestInit,
): Promise<PostCartFinish200> => {
  return customFetch<PostCartFinish200>(getPostCartFinishUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postCartFinishBody),
  })
}

/**
 * @summary Get order ID by Stripe session ID.
 */
export const getGetOrdersSessionUrl = (params: GetOrdersSessionParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/orders/session?${stringifiedParams}`
    : `/orders/session`
}

export const getOrdersSession = async (
  params: GetOrdersSessionParams,
  options?: RequestInit,
): Promise<GetOrdersSession200> => {
  return customFetch<GetOrdersSession200>(getGetOrdersSessionUrl(params), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary List all orders for the logged-in user.
 */
export const getGetOrdersUrl = () => {
  return `/orders`
}

export const getOrders = async (
  options?: RequestInit,
): Promise<GetOrders200> => {
  return customFetch<GetOrders200>(getGetOrdersUrl(), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Get details of a specific order by ID for the logged-in user.
 */
export const getGetOrdersIdUrl = (id: string) => {
  return `/orders/${id}`
}

export const getOrdersId = async (
  id: string,
  options?: RequestInit,
): Promise<GetOrdersId200> => {
  return customFetch<GetOrdersId200>(getGetOrdersIdUrl(id), {
    ...options,
    method: 'GET',
  })
}
